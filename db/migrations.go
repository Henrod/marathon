// Code generated by go-bindata.
// sources:
// ../migrations/20161203192932_init.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Migrations20161203192932_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x46\x5c\x8c\xd5\x44\xea\xa1\xa7\xe4\x44\xcc\xba\xa2\xa5\x90\xf0\x21\x25\xa7\xd5\x02\x13\xbc\x2d\x66\x11\x2c\x8e\xa3\xaa\xff\xbd\xbb\x90\xe0\x1a\xb7\x2e\x95\xaa\x9c\xac\x7d\x33\xcc\xc7\x7b\x6f\xbd\xc6\xe5\x25\xbc\x2b\x84\x68\x11\x92\x5a\x1f\xa2\x3b\x0f\x78\x05\x2d\x66\x92\x8b\x0a\x16\x49\xbd\x00\xde\x02\xee\x31\xeb\x24\xe6\xf0\xb4\xc1\x0a\xe4\x46\x41\x5b\x5e\x34\xac\x4f\x52\x07\x56\xd7\x25\xc7\xdc\x30\x56\x21\xb1\x63\x02\xe4\x3e\x26\x7e\xe4\x06\x3e\xb8\x6b\xf0\x83\x58\x01\x6e\x14\x47\x60\x76\x1d\xcf\x2f\x45\xdb\xd6\xe6\xf5\x98\x1c\xdb\x37\x1e\x01\x53\xd5\x68\x4d\xb0\x0c\x00\x93\xe7\x26\xe8\x4c\x70\xc8\xda\x4e\xbc\xb8\x3f\xd0\x02\x2b\x54\x2d\x91\xee\x3e\x58\xcb\x0b\x9d\x57\xb1\x2d\x9a\x20\x71\x2f\xfb\x26\x7e\xe2\x79\x3d\x9e\x76\x55\x5e\x22\xd5\x65\x4e\x83\x59\x83\xaa\x48\x4e\xd3\xe7\x73\x51\x26\x4d\x48\x79\xc1\x2b\xd9\xc3\x5d\x9d\x4f\x60\xd0\xf8\x6d\xe8\x7e\xb1\xc3\x07\xf8\x4c\x1e\xc0\xd2\x63\x2f\x8d\xe5\x61\xb1\xc4\x77\xef\x12\x02\xae\xef\x90\x7b\xe8\xf8\x9e\xea\x15\xe9\x38\x1c\x28\x7a\x86\xad\xad\x11\x5b\x9e\xd0\x22\x71\x5b\x97\xaa\xf7\xff\xe2\xa6\x14\x19\x2b\x7f\x1b\xc9\xf1\x91\x75\xa5\x54\x8d\x3e\x45\x81\x7f\x33\x06\xc7\x4e\x8b\xef\x3f\x16\x57\x57\x7d\x70\xa0\x59\xe4\xcf\xb3\x93\xcf\xd3\xae\x68\xa0\xe3\x66\x6f\x23\x88\x26\x88\x0e\x6c\x68\x61\x7a\x35\x0e\x64\x5b\x03\x81\x17\x23\x61\x17\x30\xcc\xa8\xcb\xd9\x5e\x4c\xc2\x53\x81\x0c\xdb\x71\x60\x15\xf8\x51\x1c\xda\xae\x1f\xc3\x18\xa1\xc3\xa7\x83\xfe\xea\xf7\x51\x34\xc8\x8b\xca\x58\x07\x21\x71\x3f\xfa\xc3\xb4\x2f\xe5\x8d\x90\xac\x49\x48\xfc\x15\x89\x74\xc7\xd6\xd2\x98\x9a\xcd\x21\x1e\x51\x2b\xac\xec\x68\x65\x3b\x44\x23\xc9\xad\x63\x1f\x90\x13\xe3\x7c\x15\xe9\xbf\x7a\x46\x0a\xc9\x4a\x9a\x32\x99\x6d\xb4\xdf\x14\xa9\x58\x60\x33\xc8\x20\xd4\x2e\xd8\x0b\x38\x09\x9f\x4a\xff\x7e\xf2\xc5\x44\x3a\xdc\xd7\xbc\xd1\xa4\x1c\xc3\x99\xa8\xb4\x2f\x66\x1b\xaa\xc5\x66\xc7\xb3\x17\x27\xf7\xc8\x23\x2f\x25\x36\xf3\xfd\xbb\x45\xc9\x94\x8b\xd8\x7c\x0f\xb7\x3b\x5a\x33\xb9\xf9\xa5\xe7\xd4\xd6\x7f\x71\xf3\xab\x25\xe8\x9f\xae\xe7\x6c\xbb\x9f\x71\xfb\x91\x3d\x7b\x1b\x4c\x9d\xa9\xc1\x37\x32\xe5\xe1\x85\x71\xc4\x53\xf5\xfa\xc6\x8c\x0f\x8c\x06\x67\x3d\x31\x8d\x28\x4b\x15\x4d\x59\xf6\xcd\x30\x9c\x30\xb8\x3d\x5a\xf0\xfa\x08\x3a\x5c\xc9\x63\xbc\xff\xb3\xbd\x36\x7e\x06\x00\x00\xff\xff\xb1\x10\x0d\x52\xf6\x06\x00\x00")

func Migrations20161203192932_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_Migrations20161203192932_initSql,
		"../migrations/20161203192932_init.sql",
	)
}

func Migrations20161203192932_initSql() (*asset, error) {
	bytes, err := Migrations20161203192932_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../migrations/20161203192932_init.sql", size: 1782, mode: os.FileMode(420), modTime: time.Unix(1481141243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../migrations/20161203192932_init.sql": Migrations20161203192932_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"20161203192932_init.sql": &bintree{Migrations20161203192932_initSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

